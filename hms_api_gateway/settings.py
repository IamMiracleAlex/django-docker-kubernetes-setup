"""
Django settings for hms_api_gateway project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

from corsheaders.defaults import default_headers
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", default='abkw%7(awf8rnv^f39ijg!!w')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
# ALLOWED_HOSTS = ['http://api.staging.heckerbella.com','http://api.development.heckerbella.com']

# celery config
BROKER_URL = os.environ.get('BROKER_URL', default='redis://localhost:6379')
# CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', default='redis://localhost:6379')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Application definition
SHARED_APPS = [
	"django_tenants",
	"tenants",
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'corsheaders',
	'drf_yasg',
	'storages',

	# Rest Application
	'rest_framework',
	'rest_framework_simplejwt',
	'rest_framework.authtoken',
	'accounts',

]

DOMAIN = os.environ.get('DOMAIN',  default='localhost')

TENANT_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'corsheaders',
	'drf_yasg',
	'storages',

	# Rest Application
	'rest_framework',
	'rest_framework_simplejwt',
	'rest_framework.authtoken',

	# CRM Application
	'accounts'
]

INSTALLED_APPS = SHARED_APPS + [x for x in TENANT_APPS if x not in SHARED_APPS] + ["channels"]
# CRM Application

TENANT_MODEL = 'tenants.Hospital'
TENANT_DOMAIN_MODEL = "tenants.Domain"

# Parser classes to help swagger, default ll be JSONParser only.

SWAGGER_SETTINGS = {
	# "DEFAULT_AUTO_SCHEMA_CLASS": "apps.api.inspectors.SwaggerAutoSchema",
	"USE_SESSION_AUTH": False,
	'SECURITY_DEFINITIONS': {
		'Bearer': {
			'type': 'apiKey',
			'name': 'Authorization',
			'in': 'header'
		}
	},
	'REFETCH_SCHEMA_WITH_AUTH': True,

}

ASGI_APPLICATION = "hms_api_gateway.asgi.application"

CHANNEL_LAYERS = {
	"default": {
		"BACKEND": "channels_redis.core.RedisChannelLayer",
		"CONFIG": {
			"hosts": [('127.0.0.1' if os.environ.get('DOMAIN',  default='localhost') == 'localhost' else 'redis', 6379)],
		},
	},
}

MIDDLEWARE = [
	'django_tenants.middleware.TenantMiddleware',
	'utilities.multitenant.custom_middleware.TenantMiddleware',
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hms_api_gateway.urls'
PUBLIC_SCHEMA_URLCONF = 'hms_api_gateway.public_urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'hms_api_gateway.wsgi.application'

# CORS WHITELIST
CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_METHODS = [
	"DELETE",
	"GET",
	"OPTIONS",
	"PATCH",
	"POST",
	"PUT",
]

CORS_ALLOW_HEADERS = list(default_headers) + [
	"company",
]

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# CORS_ORIGIN_REGEX_WHITELIST = [
#     r"^https://\w+\.heckerbella\.com$",
# ]


REST_FRAMEWORK = {

	'DEFAULT_AUTHENTICATION_CLASSES': (

		'rest_framework_simplejwt.authentication.JWTAuthentication',
		# 'allauth.account.auth_backends.AuthenticationBackend',
	)
}

REST_USE_JWT = True

SIMPLE_JWT = {
	'ACCESS_TOKEN_LIFETIME': timedelta(days=2),
	'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
	'ROTATE_REFRESH_TOKENS': False,
	'BLACKLIST_AFTER_ROTATION': True,
	'UPDATE_LAST_LOGIN': True,

	'ALGORITHM': 'HS256',
	'SIGNING_KEY': os.environ.get("SECRET_KEY", default='abkw%7(awf8rnv^f39ijg!!w'),
	'VERIFYING_KEY': None,
	'AUDIENCE': None,
	'ISSUER': None,

	'AUTH_HEADER_TYPES': ('Bearer',),
	'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
	'USER_ID_FIELD': 'id',
	'USER_ID_CLAIM': 'user_id',
	'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

	'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
	'TOKEN_TYPE_CLAIM': 'token_type',

	'JTI_CLAIM': 'jti',

	'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
	'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
	'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE': os.environ.get('ENGINE'),
		'NAME': os.environ.get('DB_NAME'),
		'USER': os.environ.get('POSTGRES_USER'),
		'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
		'HOST': os.environ.get('DB_HOST'),
		'PORT': os.environ.get('DB_PORT'),
	}
}
DATABASE_ROUTERS = (
	'django_tenants.routers.TenantSyncRouter',
)


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

USE_S3 = os.environ.get('USE_S3') == 'TRUE'

if USE_S3:
	AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
	AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
	AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
	AWS_DEFAULT_ACL = 'public-read'
	AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
	AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}

	# STATIC_LOCATION = 'static'
	# STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATIC_LOCATION}/'
	# STATICFILES_STORAGE = 'hms_api_gateway.storage_backends.StaticStorage'

	MEDIA_LOCATION = 'media'
	MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIA_LOCATION}/'
	DEFAULT_FILE_STORAGE = 'hms_api_gateway.storage_backends.PublicMediaStorage'

else:

	MEDIA_URL = '/media/'
	MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MULTITENANT_RELATIVE_MEDIA_ROOT = "%s"

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_DIR = (os.path.join(BASE_DIR, "static"),)

# STATICFILES_DIRS = [
#     STATIC_DIR,
# ]

AUTH_USER_MODEL = 'accounts.User'

#  Additional settings
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

TENANT_USERS_DOMAIN = "localhost"

SESSION_COOKIE_DOMAIN = None

SHOW_PUBLIC_IF_NO_TENANT_FOUND = True

# EMAIL
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND')
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_PORT = os.environ.get('EMAIL_PORT')
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')

# X - HOST
USE_X_FORWARDED_HOST = True

IPINFO_TOKEN = os.environ.get('IPINFO_TOKEN', '')

